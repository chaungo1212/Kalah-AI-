import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

/*
	command ::== info| move | ack
	info ::== INFO game_config
	move ::== hole (hole)* | P
	WELCOME | READY | OK | ILLEGAL | TIME | LOSER | WINNER | TIE
	game_config ::== <int for holes per side> <int for seeds per side> <long int for time> <F | S> <S | R hole_config>
	hole_config ::== <int for seeds in hole 1> … <int for seeds in hole h> 
 */

public class Server {
	
	private static String message;
	private static ServerSocket listener;
	private static Socket server_socket;
	private static Scanner socket_scanner;
	private static boolean closed = false;
	private static boolean stopped = false;
	private static String game_config;
	
	private static final String wel = "WELCOME";
	private static final String red = "READY";
	private static final String ok = "OK";
	private static final String ill = "ILLEGAL";
	private static final String time = "TIME";
	private static final String loss = "LOSER";
	private static final String win = "WINNER";
	private static final String tie = "TIE";
	
	public Server() throws IOException {
		listener = new ServerSocket(4444); //getting an error because port number is taken on this computer
		server_socket = listener.accept(); 	//causes blocking so you want to make some kind of threading that
													// the server listens on, and another thread where is reads/writes
		socket_scanner = new Scanner(server_socket.getInputStream());
		closed = false;
		stopped = false;
	}
	
	public static String getMessage() {
		return message;
	}
	
	public static void setMessage(String new_message) {
		message = new_message;
	}
	
	public static boolean getClosed() {
		return closed;
	}
	
	public static boolean getStopped() {
		return stopped;
	}
	
	public static Socket getSocket() {
		return server_socket;
	}
	
	public static ServerSocket getListener() {
		return listener;
	}
	
	public static Scanner getSocketScan() {
		return socket_scanner;
	}
	
	public static void close() throws IOException {
		  try {
			if (!closed)
			{
				closed = true;
			    server_socket.close();
			    listener.close();
			    socket_scanner.close();
			}
		  }
		  catch (IOException i) {
	          System.err.println("Couldn't close localhost.");
	          System.exit(1);
		  }
		  catch(Exception e) {
			  System.exit(1);
		  }
	}
	
	public static void main(String args[]) throws IOException {
		try {
			while (!getStopped()) {
				if (getSocket().isConnected()) {
					PrintStream p_stream = new PrintStream(getSocket().getOutputStream());
					setMessage(wel);
					p_stream.println(getMessage());
					setMessage("INFO" + game_config);
					p_stream.println(getMessage());
					if (getSocketScan().nextLine() == red) {
					//if AI
						//start game
							//if client turn,
								//setMessage(getSocketScan().nextLine());
								//check if time out
								//if time out
									//setMessage(time);
									//p_stream.println(getMessage());
									//setMessage(loss);
									//p_stream.println(getMessage());
								//else
								//check if is valid
								//if is not valid
									//setMessage(ill);
									//p_stream.println(getMessage());
									//setMessage(loss);
									//p_stream.println(getMessage());
								//else
									//setMessage(ok);
									//p_stream.println(getMessage());
							//else (if server turn)
								//AI_move = AI_getmove();
								//setMessage(AI_move);
								//p_stream.println(getMessage());				
					}
					
				}
				
				//setMessage(getSocketScan().nextLine());
				//PrintStream p_stream = new PrintStream(getSocket().getOutputStream());
				//p_stream.println(getMessage());
		
			}
		}
		catch (IOException i) {
            System.err.println("Couldn't get I/O for the connection to: localhost.");
            System.err.println("Connection refused: localhost.");
            System.exit(1);
		}
		catch (Exception e) {
			System.exit(1);
		}
		finally {
			close();
		}
	}
}
